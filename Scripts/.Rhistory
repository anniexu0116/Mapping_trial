scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
# Creating the plot with each dot representing a neighborhood
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
#geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x = S_hood_longitude, y = S_hood_latitude), size = 2, color = "black", hjust = 0.4, vjust = 0.5) + #Add the text label
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(psych)
library(dplyr)
library(sf)
library(here)
library(leaflet)
here()
SPL <- read.csv(here("data/raw","03_SPL_Staying.csv")) # main dataset with SPL staying observations
SPL_sites <- read.csv(here("data/raw","02_SPL_location.csv")) # SPL location_id info
geo_SPL_locationids <- st_read(here("data/raw", "01_SPL_Geography.geojson")) # shapefile data with location_id polygons
#Create a separate dataset for 2018 and 2023 data
SPL_1823 <- SPL %>%
filter(study_id=="2018_Seattle_Citywide" | study_id =="2023_Seattle_Citywide")
# First match observation site (location_id) with the neighborhoods they're in (location_neighborhood)
SPL_sites <- SPL_sites %>% select(location_id, location_neighborhood) # just select the location_neighborhood col that we care about
SPL_1823 <- left_join(SPL_1823, SPL_sites, by = "location_id") # merge the SPL data with the location_neighborhood col
# Check to see that all location_ids have a corresponding location_neighborhood
unique(SPL_1823[is.na(SPL_1823$location_neighborhood), ]$location_id) # missing location_neighborhood for a few
# Fill in NA location_neighborhoods manually
SPL_1823$location_neighborhood[which(SPL_1823$location_id == "BLV3")] <- "Bitter Lake Village"
SPL_1823$location_neighborhood[which(SPL_1823$location_id == "PIK6")] <- "Pike/Pine"
SPL_1823$location_neighborhood[which(SPL_1823$location_id %in% c("PIO20", "PIO21"))] <- "Pioneer Square"
SPL_1823$location_neighborhood[which(SPL_1823$location_id == "CAP5")] <- "Capitol Hill"
SPL_1823$location_neighborhood[which(SPL_1823$location_id %in% c("COM5", "COM6", "COM7", "COM8"))] <- "Commercial Core"
SPL_1823$location_neighborhood[which(SPL_1823$location_id == "FHT5")] <- "First Hill / 12th Ave"
# Rename neighborhoods to match the names in the geospatial data (S_HOOD)
SPL_1823 <- SPL_1823 %>%
mutate(S_HOOD = recode(location_neighborhood,
"23rd & Union - Jackson" = "Pinehurst",
"Capitol Hill" = "Broadway",
"Bitter Lake Village" = "Bitter Lake",
"Magnolia" = "Carleton Park",
"Upper Queen Anne" = "North Queen Anne",
"Pike/Pine" = "Pike-Market",
"Greenwood - Phinney Ridge" = "Greenwood",
"Westwood - Highland Park"= "Highland Park",
"Othello" = "Columbia City",
"Madison Miller" = "Stevens",
"Uptown" = "Lower Queen Anne",
"First Hill / 12th Ave" = "Broadview",
"West Seattle Junction" = "Gatewood",
"Commercial Core" = "Central Business District",
"Mt Baker"= "Mount Baker",
"Chinatown / ID" = "International District",
"Northgate" = "Maple Leaf",
"Lake City" = "Victory Heights"))
# First check to see if we have shapefiles for all location_ids
spl_18_locids <- unique(SPL_1823$location_id)
geo_locids <- unique(geo_SPL_locationids$location_id)
spl_18_locids[which(!spl_18_locids %in% geo_locids)] # missing shapefiles for these: BLT5, PIK5, BLV3, PIK6, HPT1, PIO21, PIO20, HPT2, CAP5, COM5, COM6, COM7, COM8, FHT5
# Identify which study the missing shapefiles are from
SPL_1823 %>% select(study_id, location_id) %>% filter(location_id %in% c("BLT5", "PIK5", "BLV3", "PIK6", "HPT1", "PIO21", "PIO20", "HPT2", "CAP5", "COM5", "COM6", "COM7", "COM8", "FHT5")) %>% table() # missing shapefiles are all from 2023 survey
# Filter geodata for just the location_ids in our 2018/2023 data
geo_SPL_1823_locationids <- geo_SPL_locationids %>% filter(location_id %in% spl_18_locids) # should have 108 location_ids
# Extract lat/long coordinates from centroids
geo_SPL_1823_locationids <- geo_SPL_1823_locationids %>%
mutate(longitude=st_coordinates(st_centroid(geometry))[,1], #Extract the longitude
latitude=st_coordinates(st_centroid(geometry))[,2])   #Extract the latitude
# test plot
ggplot(geo_SPL_1823_locationids) +
geom_sf()
write.csv(SPL_1823, here("data", "SPL_1823.csv"))
sf::st_write(geo_SPL_1823_locationids,here("data", "SPL_1823_location.geojson"))
rm(list=ls())
library(tidyverse)
library(psych)
library(dplyr)
library(sf)
library(here)
library(ggplot2)
library(plotly) #interactive plots
library(htmlwidgets)
SPL_1823 <- read.csv(here("data","SPL_1823.csv"))
SPL_1823_geo <- st_read(here("data", "SPL_1823_location.geojson")) # location_id shapefiles and lat/long coordinates
SEA_map <- st_read(here("data/raw","04_SPL_Seattle_Map.geojson")) # base SEA neighborhood map
SPL_1823 <- SPL_1823 %>%
mutate(
gender=recode(staying_gender,
"Female"="Fem",
"Feminine presenting"="Fem",
"Gender-non-conforming presenting" = "non_conforming",
"Male"="Masc",
"Masculine presenting"="Masc",
"Other_Unsure"="Unsure",
"Unsure"="Unsure"))
# table(SPL_1823$gender)
# table(SPL_1823$staying_gender)
FM_ratio <- SPL_1823 %>%
group_by(S_HOOD, gender, study_id) %>%
dplyr::summarise(count= n()) %>%
pivot_wider(
id_cols = c(S_HOOD, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
mutate(FM_ratio = round(Observed_Fem/Observed_Masc, 2)) %>%
select(S_HOOD, study_id, FM_ratio)
FM_ratio_locid <- SPL_1823 %>%
group_by(location_id, gender, study_id) %>%
dplyr::summarise(count = n()) %>%
pivot_wider(
id_cols = c(location_id, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
mutate(FM_ratio = round(Observed_Fem/Observed_Masc, 2)) %>%
select(location_id, study_id, FM_ratio)
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,"X"],
S_hood_latitude = st_coordinates(centroids)[ , "Y"]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
knitr::opts_chunk$set(echo = TRUE)
SPL_1823 <- SPL_1823 %>%
mutate(
gender=recode(staying_gender,
"Female"="Fem",
"Feminine presenting"="Fem",
"Gender-non-conforming presenting" = "non_conforming",
"Male"="Masc",
"Masculine presenting"="Masc",
"Other_Unsure"="Unsure",
"Unsure"="Unsure"))
# table(SPL_1823$gender)
# table(SPL_1823$staying_gender)
FM_ratio <- SPL_1823 %>%
group_by(S_HOOD, gender, study_id) %>%
dplyr::summarise(count= n()) %>%
pivot_wider(
id_cols = c(S_HOOD, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
mutate(FM_ratio = round(Observed_Fem/Observed_Masc, 2)) %>%
select(S_HOOD, study_id, FM_ratio)
FM_ratio_locid <- SPL_1823 %>%
group_by(location_id, gender, study_id) %>%
dplyr::summarise(count = n()) %>%
pivot_wider(
id_cols = c(location_id, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
mutate(FM_ratio = round(Observed_Fem/Observed_Masc, 2)) %>%
select(location_id, study_id, FM_ratio)
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,"X"],
S_hood_latitude = st_coordinates(centroids)[ , "Y"]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()
centroids
str(centroids)
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,1],
S_hood_latitude = st_coordinates(centroids)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
centroids
#Merge by S_Hood----
FM_ratio_18_geo <- left_join(FM_ratio_18_geo, centroids, by = "S_HOOD")
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,1],
S_hood_latitude = st_coordinates(centroids)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,1],
S_hood_latitude = st_coordinates(centroids)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
FM_ratio_18_geo_dissolved
# Creating the plot with each dot representing a neighborhood
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
#geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x = S_hood_longitude, y = S_hood_latitude), size = 2, color = "black", hjust = 0.4, vjust = 0.5) + #Add the text label
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
# Create the interactive plot ----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)
p <- ggplotly(, tooltip = "text")
P
p
# Creating the plot----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
#geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x = S_hood_longitude, y = S_hood_latitude), size = 2, color = "black", hjust = 0.4, vjust = 0.5) + #Add the text label
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
# Save 2018 map as an PNG in the Visualization folder ----
ggsave(filename = "2018_FMratio_map.png", path = here("Visualization"), bg="white", height = 7, width = 7)
# Create the interactive plot ----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)%>%
ggplotly(tooltip = "text")
# Create the interactive plot ----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)%>%
ggplotly(,tooltip = "text")
# Create the interactive plot ----
p <- ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)
p <- ggplotly(, tooltip = "text")
#Save the interactive plot ----
saveWidget(p, here("Visualization", "2018_map_interactive.html"), selfcontained = FALSE, libdir = "libs")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,1],
S_hood_latitude = st_coordinates(centroids)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(.)[ ,1],
S_hood_latitude = st_coordinates(.)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
centroids
#Merge by S_Hood----
FM_ratio_18_geo <- left_join(FM_ratio_18_geo, centroids, by = "S_HOOD")
# Creating the plot----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x = S_hood_longitude, y = S_hood_latitude), size = 2, color = "black", hjust = 0.4, vjust = 0.5) + #Add the text label
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
FM_ratio_18_geo
centroids
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(.)[ ,1],
S_hood_latitude = st_coordinates(.)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
centroids
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
st_drop_geometry()%>%
mutate(
S_hood_longitude = st_coordinates(.)[ ,1],
S_hood_latitude = st_coordinates(.)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(.)[ ,1],
S_hood_latitude = st_coordinates(.)[ , 1]
)%>%
st_drop_geometry()%>%
as.data.frame()
centroids
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(.)[ ,1],
S_hood_latitude = st_coordinates(.)[ , 1]
)%>%
st_drop_geometry()%>% #Drop the geometry column
as.data.frame()
#Merge by S_Hood----
FM_ratio_18_geo <- left_join(FM_ratio_18_geo, centroids, by = "S_HOOD")
# Creating the plot----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x = S_hood_longitude, y = S_hood_latitude), size = 2, color = "black", hjust = 0.4, vjust = 0.5) + #Add the text label
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
FM_ratio_18_geo
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Creating the plot----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
# Save 2018 map as an PNG in the Visualization folder ----
ggsave(filename = "2018_FMratio_map.png", path = here("Visualization"), bg="white", height = 7, width = 7)
# Create the interactive plot ----
p <- ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)
p <- ggplotly(, tooltip = "text")
#Save the interactive plot ----
saveWidget(p, here("Visualization", "2018_map_interactive.html"), selfcontained = FALSE, libdir = "libs")
p
