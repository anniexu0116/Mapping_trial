[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\nsource(\"data_cleaning_23SPL.R\")\n\n# Shiny app----\n# Define UI for application that draws a histogram\nui <- fluidPage(\n  titlePanel(\"2023 Seattle Public Life People Staying by Gender\"),\n  splitLayout(\n    #    cellWidths = c(\"50%\",\"50%\"),\n    plotlyOutput(outputId = \"main_plot\", height = \"600px\"),\n    plotlyOutput(outputId = \"detail_plot\", height = \"600px\")\n    # textOutput(outputId = \"detail_text\")\n  ))\n\n# Define server logic\nserver <- function(input, output) {\n  # Render the main plot\n  output$main_plot <- renderPlotly({\n    p <- ggplot() +\n      geom_sf(data = SEA_map) +  # Plot base SEA neighborhood map\n      geom_point(\n        data = FM_prop_23_locid_geo,\n        aes(\n          x = longitude,\n          y = latitude,\n          color = F_prop,\n          key = location_id\n        ),\n        shape = 20,\n        size = 4\n      ) +\n      scale_color_gradientn(\n        name = \"Fem-presenting/Total\",\n        colours = c(\"mistyrose\", \"violetred3\"),\n        breaks = c(0, 0.2, 0.4, 0.6, 0.8)\n      ) +\n      labs(\n        title = \"2023 Percentage of Feminine-Presenting Individuals Staying by Observation Site\",\n        fill = \"Observation Sites\"\n      )\n    \n    ggplotly(p, tooltip = NULL) %>%\n      layout(clickmode = \"event+select\")  # Enable lasso selection\n  })\n  \n  # Observe selection events\n  observeEvent(event_data(\"plotly_selected\"), {\n    selected_data <- event_data(\"plotly_selected\")\n    if (is.null(selected_data)) {\n      output$detail_plot <- renderPlotly(NULL)\n      output$detail_text <- renderText(\"No points selected.\")\n      return(NULL)\n    }\n    \n    # Extract the location_ids of the selected points\n    selected_location_ids <- selected_data$key\n    \n    # Filter the original data for the selected points\n    selected_points <- FM_prop_23_locid_geo[FM_prop_23_locid_geo$location_id %in% selected_location_ids, ]\n    \n    # Render the detail plot with selected points\n    output$detail_plot <- renderPlotly({\n      p_detail <- ggplot() +\n        geom_sf(data = SEA_map) +  # Plot base SEA neighborhood map\n        geom_point(\n          data = selected_points,\n          aes(\n            x = longitude,\n            y = latitude,\n            color = F_prop,\n            text = paste(\n              \"Block face: \", location_id,\n              \"<br>Percentage of Fem_presenting: \", round(F_prop, 2),\n              \"<br>Percentage of Masc_presenting: \", round(M_prop, 2),\n              \"<br>Total observation: \", total,\n              \"<br>Neighborhood: \", S_HOOD\n            )\n          ),\n          shape = 20,\n          size = 6\n        ) +\n        scale_color_gradientn(\n          colours = c(\"mistyrose\", \"violetred3\"),\n          breaks = c(0, 0.2, 0.4, 0.6, 0.8)\n        ) +\n        labs(\n          title = \"Selected Observation Sites\"\n        ) +\n        theme(legend.position = \"none\")  # Remove legend\n      \n      ggplotly(p_detail, tooltip = \"text\")\n    })\n    \n    # Render detailed text information\n    output$detail_text <- renderText({\n      paste(\"Selected Block Faces:\", paste(selected_location_ids, collapse = \", \"))\n    })\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"001_SPL_clean.Rmd","content":"---\ntitle: \"001_SPL_clean\"\noutput: html_document\ndate: \"2024-04-16\"\n---\n\nThis script creates two new intermediary datasets:\n\n1) SPL_1823.csv: the SPL staying dataset filtered for year 2018 and 2023 with new columns for location_neighborhood (the neighborhood of the observation location, based on the SPL location naming) and S_HOOD (the neighborhood of the observation location, based on the Seattle Neighborhood Map Atlas naming)\n\n2) SPL_1823_location.geojson: the shapefiles and centroid lat/lon for all the location_ids in SPL 2018 and 2023\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n# Load required packages\n```{r}\nrm(list=ls())\nlibrary(tidyverse)\nlibrary(psych)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(here)\nlibrary(leaflet)\n```\n\n# Import all datasets\n```{r}\nSPL <- read.csv(here(\"data/raw\",\"03_SPL_Staying.csv\")) # main dataset with SPL staying observations\nSPL_sites <- read.csv(here(\"data/raw\",\"02_SPL_location.csv\")) # SPL location_id info\ngeo_SPL_locationids <- st_read(here(\"data/raw\", \"01_SPL_Geography.geojson\")) # shapefile data with location_id polygons\n```\n\n# Subset dataset for 2018 and 2023 data\n```{r}\n#Create a separate dataset for 2018 and 2023 data\nSPL_1823 <- SPL %>%\n  filter(study_id==\"2018_Seattle_Citywide\" | study_id ==\"2023_Seattle_Citywide\")\n```\n\n# Create neighborhood column\n```{r}\n# First match observation site (location_id) with the neighborhoods they're in (location_neighborhood)\nSPL_sites <- SPL_sites %>% select(location_id, location_neighborhood) # just select the location_neighborhood col that we care about\nSPL_1823 <- left_join(SPL_1823, SPL_sites, by = \"location_id\") # merge the SPL data with the location_neighborhood col\n\n# Check to see that all location_ids have a corresponding location_neighborhood\nunique(SPL_1823[is.na(SPL_1823$location_neighborhood), ]$location_id) # missing location_neighborhood for a few\n\n# Fill in NA location_neighborhoods manually\nSPL_1823$location_neighborhood[which(SPL_1823$location_id == \"BLV3\")] <- \"Bitter Lake Village\"\nSPL_1823$location_neighborhood[which(SPL_1823$location_id == \"PIK6\")] <- \"Pike/Pine\"\nSPL_1823$location_neighborhood[which(SPL_1823$location_id %in% c(\"PIO20\", \"PIO21\"))] <- \"Pioneer Square\"\nSPL_1823$location_neighborhood[which(SPL_1823$location_id == \"CAP5\")] <- \"Capitol Hill\"\nSPL_1823$location_neighborhood[which(SPL_1823$location_id %in% c(\"COM5\", \"COM6\", \"COM7\", \"COM8\"))] <- \"Commercial Core\"\nSPL_1823$location_neighborhood[which(SPL_1823$location_id == \"FHT5\")] <- \"First Hill / 12th Ave\"\n\n# Rename neighborhoods to match the names in the geospatial data (S_HOOD)\nSPL_1823 <- SPL_1823 %>%\n  mutate(S_HOOD = recode(location_neighborhood,\n                          \"23rd & Union - Jackson\" = \"Pinehurst\",\n                          \"Capitol Hill\" = \"Broadway\",\n                          \"Bitter Lake Village\" = \"Bitter Lake\",\n                          \"Magnolia\" = \"Carleton Park\",\n                          \"Upper Queen Anne\" = \"North Queen Anne\",\n                          \"Pike/Pine\" = \"Pike-Market\",\n                          \"Greenwood - Phinney Ridge\" = \"Greenwood\",\n                          \"Westwood - Highland Park\"= \"Highland Park\",\n                          \"Othello\" = \"Columbia City\",                \n                          \"Madison Miller\" = \"Stevens\",\n                          \"Uptown\" = \"Lower Queen Anne\",\n                          \"First Hill / 12th Ave\" = \"Broadview\",\n                          \"West Seattle Junction\" = \"Gatewood\",\n                          \"Commercial Core\" = \"Central Business District\",\n                          \"Mt Baker\"= \"Mount Baker\",              \n                          \"Chinatown / ID\" = \"International District\",          \n                          \"Northgate\" = \"Maple Leaf\",              \n                          \"Lake City\" = \"Victory Heights\"))\n```\n\n# Subset geo data for 2018 and 2023 locations\n```{r}\n# First check to see if we have shapefiles for all location_ids\nspl_18_locids <- unique(SPL_1823$location_id)\ngeo_locids <- unique(geo_SPL_locationids$location_id)\nspl_18_locids[which(!spl_18_locids %in% geo_locids)] # missing shapefiles for these: BLT5, PIK5, BLV3, PIK6, HPT1, PIO21, PIO20, HPT2, CAP5, COM5, COM6, COM7, COM8, FHT5\n\n# Identify which study the missing shapefiles are from\nSPL_1823 %>% select(study_id, location_id) %>% filter(location_id %in% c(\"BLT5\", \"PIK5\", \"BLV3\", \"PIK6\", \"HPT1\", \"PIO21\", \"PIO20\", \"HPT2\", \"CAP5\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"FHT5\")) %>% table() # missing shapefiles are all from 2023 survey\n\n# Filter geodata for just the location_ids in our 2018/2023 data\ngeo_SPL_1823_locationids <- geo_SPL_locationids %>% filter(location_id %in% spl_18_locids) # should have 108 location_ids\n\n# Extract lat/long coordinates from centroids\ngeo_SPL_1823_locationids <- geo_SPL_1823_locationids %>%\n  mutate(longitude=st_coordinates(st_centroid(geometry))[,1], #Extract the longitude \n         latitude=st_coordinates(st_centroid(geometry))[,2])   #Extract the latitude\n\n# test plot\nggplot(geo_SPL_1823_locationids) +\n  geom_sf()\n```\n\n# Export data\n```{r}\nwrite.csv(SPL_1823, here(\"data\", \"SPL_1823.csv\"))\nsf::st_write(geo_SPL_1823_locationids,here(\"data\", \"SPL_1823_location.geojson\"))\n```\n","type":"text"},{"name":"002_SPL_FMratio.Rmd","content":"---\ntitle: \"002_SPL_FMratio\"\noutput: html_document\ndate: \"2024-04-16\"\n---\n\nRecodes gender, calculates female:male ratio by neighborhood and location_id, and maps the female:male ratio\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n# Load required packages\n```{r}\nrm(list=ls())\nlibrary(tidyverse)\nlibrary(psych)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(here)\nlibrary(ggplot2)\nlibrary(plotly) #interactive plots\nlibrary(htmlwidgets)\n\n```\n\n# Import data\n```{r}\nSPL_1823 <- read.csv(here(\"data\",\"SPL_1823.csv\"))\nSPL_1823_geo <- st_read(here(\"data\", \"SPL_1823_location.geojson\")) # location_id shapefiles and lat/long coordinates\nSEA_map <- st_read(here(\"data/raw\",\"04_SPL_Seattle_Map.geojson\")) # base SEA neighborhood map\n```\n\n# Recode the gender column \n```{r}\nSPL_1823 <- SPL_1823 %>%\n  mutate(\n    gender=recode(staying_gender,\n                        \"Female\"=\"Fem\",\n                        \"Feminine presenting\"=\"Fem\",\n                        \"Gender-non-conforming presenting\" = \"non_conforming\",\n                        \"Male\"=\"Masc\",\n                        \"Masculine presenting\"=\"Masc\",\n                        \"Other_Unsure\"=\"Unsure\",\n                        \"Unsure\"=\"Unsure\"))\n\n# table(SPL_1823$gender)\n# table(SPL_1823$staying_gender)\n```\n\n# Calculate women/men ratio by neighborhood (S_HOOD)\n```{r}\nFM_ratio <- SPL_1823 %>%\n  group_by(S_HOOD, gender, study_id) %>%\n  dplyr::summarise(count= n()) %>%\n  pivot_wider(\n    id_cols = c(S_HOOD, study_id),\n    names_from = gender,\n    values_from = count,\n    names_prefix = \"Observed_\"\n  ) %>%\n  mutate(FM_ratio = round(Observed_Fem/Observed_Masc, 2)) %>%\n  select(S_HOOD, study_id, FM_ratio)\n```\n\n# Calculate women/men ratio by observation site (location_id)\n```{r}\nFM_ratio_locid <- SPL_1823 %>%\n  group_by(location_id, gender, study_id) %>%\n  dplyr::summarise(count = n()) %>%\n  pivot_wider(\n    id_cols = c(location_id, study_id),\n    names_from = gender,\n    values_from = count,\n    names_prefix = \"Observed_\"\n  ) %>%\n  mutate(FM_ratio = round(Observed_Fem/Observed_Masc, 2)) %>%\n  select(location_id, study_id, FM_ratio)\n```\n\n# Create map by neighborhood - neighborhood fill corresponds to women/men ratio\n\n## 2018 map\n```{r}\n# Filter 2018 data ----\nFM_ratio_18 <- FM_ratio %>%\n  filter(study_id==\"2018_Seattle_Citywide\")\n\n# Join the city map with 2018 filtered data ----\nFM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = \"S_HOOD\")\n\n# Creating the plot----\nggplot() +\n  geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +\n  scale_fill_gradient(name = \"Female-to-male staying ratio\",\n                      low = \"lightblue\", high = \"pink\", na.value = \"gray\",\n                      guide = guide_colorbar(title.position = \"top\")) +\n  labs(title = \"2018 Female-to-Male Staying Ratio by Seattle Neighborhood \") +\n  theme_minimal()+\n  theme(\n    plot.title = element_text(family = \"Times New Roman\", size = 16, face = \"bold\"),\n    axis.title.x = element_blank(),  \n    axis.title.y = element_blank() \n  )\n\n\n# Save 2018 map as an PNG in the Visualization folder ----\nggsave(filename = \"2018_FMratio_map.png\", path = here(\"Visualization\"), bg=\"white\", height = 7, width = 7)\n\n\n\n# Create the interactive plot ----\n\nggplot() +\n  geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +\n  # geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = \"black\", check_overlap = TRUE)+ #Need to troubleshoot\n  scale_fill_gradient(name = \"Female-to-male staying ratio\",\n                      low = \"lightblue\", high = \"pink\", na.value = \"gray\",\n                      guide = guide_colorbar(title.position = \"top\")) +\n  labs(title = \"2018 Female-to-Male Staying Ratio by Seattle Neighborhood \") +\n  theme_minimal()+\n  theme(\n    plot.title = element_text(family = \"Times New Roman\", size = 16, face = \"bold\")\n  )\n```\n\n## 2023 map\n```{r}\n# Filter 2023 data ----\nFM_ratio_23 <- FM_ratio %>%\n  filter(study_id==\"2023_Seattle_Citywide\")\n\n# Join the city map with 2023 filtered data ---\nFM_ratio_23_geo <- left_join(SEA_map, FM_ratio_23, by = \"S_HOOD\")\n\nggplot() +\n  geom_sf(data = FM_ratio_23_geo, aes(fill = FM_ratio)) +\n  # geom_text(data = FM_ratio_23_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = \"black\", check_overlap = TRUE)+ #Need to troubleshoot\n  scale_fill_gradient(name = \"Female-to-male staying ratio\",\n                      low = \"lightblue\", high = \"pink\", na.value = \"gray\",\n                      guide = guide_colorbar(title.position = \"top\")) +\n  labs(title = \"2023 Female-to-Male Staying Ratio by Seattle Neighborhood \") +\n  theme_minimal()+\n  theme(\n    plot.title = element_text(family = \"Times New Roman\", size = 16, face = \"bold\")\n  )\n\n# Save 2023 map as an PNG in the Visualization folder ----\nggsave(filename = \"2023_FMratio_map.png\", path = here(\"Visualization\"), bg=\"white\", width = 7, height = 7)\n```\n\n\n\n# Create map by dots (dots represent block face; color represents proportion)\n\n## 2018 map\n```{r}\n# Filter 2018 data ----\nFM_ratio_18_locid <- FM_ratio_locid %>% filter(study_id == \"2018_Seattle_Citywide\")\n\n# Join location_id coordinates with 2018 filtered data ----\nFM_ratio_18_locid_geo <- left_join(FM_ratio_18_locid, SPL_1823_geo, by = \"location_id\")\n\nggplot() +\n  geom_sf(data = SEA_map) + #plot base SEA neighborhood map\n  geom_point(data=FM_ratio_18_locid_geo, aes(x=longitude, y=latitude, color = FM_ratio, \n                                             alpha = 0.95),shape=20, size=4) + # add points\n  scale_color_gradientn(name=\"Female to Male Staying Ratio\",\n                       colours = c(\"brown\",\"lightyellow\",\"blue\"), #Specify the colors for each end \n                       breaks = c(0, 0.5, 1, 1.5, 2, max(FM_ratio_18_locid_geo$FM_ratio))) + #Create the breaks\n  scale_alpha_continuous(guide = \"none\")+\n  labs(title = \"2018 Female-to-Male Staying Ratio by Observation Site\") +\n  labs(fill=\"Observation Sites\")\n\n# Save Map_2018_dot in the Visualization folder ----\nggsave(filename = \"2018_FMratio_map_dot.png\", path = here(\"Visualization\"), bg=\"white\", width = 7, height = 7)\n```\n\n# 2018 interactive dot plot \n```{r}\np <- ggplot() +\n  geom_sf(data = SEA_map) + #plot base SEA neighborhood map\n  geom_point(data=FM_ratio_18_locid_geo, aes(x=longitude, y=latitude, color = FM_ratio, \n                                             text = paste(\"Block Face: \", location_id, \"<br>Female-to-Male Ratio: \", FM_ratio),\n                                             alpha = 0.95),shape=20, size=4) + # add points\n  scale_color_gradientn(name=\"Female to Male Staying Ratio\",\n                       colours = c(\"brown\",\"lightyellow\",\"blue\"), #Specify the colors for each end \n                       breaks = c(0, 0.5, 1, 1.5, 2, max(FM_ratio_18_locid_geo$FM_ratio))) + #Create the breaks\n  scale_alpha_continuous(guide = \"none\")+\n  labs(title = \"2018 Female-to-Male Staying Ratio by Observation Site (interactive)\") +\n  labs(fill=\"Observation Sites\")\n\np <- ggplotly(, tooltip = \"text\")\n\n#Save the interactive dot plot\nsaveWidget(p, here(\"Interactive\", \"2018_map_interactive.html\"), selfcontained = FALSE, libdir = \"libs\")\n```\n\n\n## 2023 map\n```{r}\n# Filter 2023 data ----\nFM_ratio_23_locid <- FM_ratio_locid %>% filter(study_id == \"2023_Seattle_Citywide\")\n\n# Join location_id coordinates with 2023 filtered data ----\nFM_ratio_23_locid_geo <- left_join(FM_ratio_23_locid, SPL_1823_geo, by = \"location_id\")\n\nggplot() +\n  geom_sf(data = SEA_map) + #plot base SEA neighborhood map\n  geom_point(data=FM_ratio_23_locid_geo, aes(x=longitude, y=latitude, color = FM_ratio, alpha = 0.9),shape=20, size=4) + # add points\n  scale_color_gradientn(name=\"Female to Male Staying Ratio\",\n                       colours = c(\"brown\",\"lightyellow\",\"blue\"), #Specify the colors for each end \n                       breaks = c(0, 0.5, 1, 1.5, 2, max(FM_ratio_23_locid_geo$FM_ratio))) + #Create the breaks\n  scale_alpha_continuous(guide = \"none\")+\n  labs(title = \"2023 Female-to-Male Staying Ratio by Observation Site\") +\n  labs(fill=\"Observation Sites\")\n\n\n# Save Map_2023_dot in the Visualization folder ----\nggsave(filename = \"2023_FMratio_map_dot.png\", path = here(\"Visualization\"), bg=\"white\", width = 7, height = 7)\n\n```\n\n## 2023 interactive dot map\n```{r}\np <- ggplot() +\n  geom_sf(data = SEA_map) + #plot base SEA neighborhood map\n  geom_point(data=FM_ratio_23_locid_geo, aes(x=longitude, y=latitude, color = FM_ratio, \n                                             text = paste(\"Block Face: \", location_id, \"<br>Female-to-Male Ratio: \", FM_ratio),\n                                             alpha = 0.9),shape=20, size=4) + # add points\n  scale_color_gradientn(name=\"Female to Male Staying Ratio\",\n                       colours = c(\"brown\",\"lightyellow\",\"blue\"), #Specify the colors for each end \n                       breaks = c(0, 0.5, 1, 1.5, 2, max(FM_ratio_23_locid_geo$FM_ratio))) + #Create the breaks\n  scale_alpha_continuous(guide = \"none\")+\n  labs(title = \"2023 Female-to-Male Staying Ratio by Observation Site\") +\n  labs(fill=\"Observation Sites\")\n\n\nggplotly(p, tooltip = \"text\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","type":"text"},{"name":"data_cleaning_23SPL.R","content":"\n# Clean space and load data for the app----\nrm(list=ls())\nlibrary(tidyverse)\nlibrary(psych)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(here)\nlibrary(plotly)\nlibrary(htmlwidgets)\nlibrary(shiny)\nlibrary(shinylive)\nlibrary(shiny)\nlibrary(httpuv)\n\n\n# Import relevant data----\nSPL_1823 <- read.csv(here(\"data\",\"SPL_1823.csv\"))\nSPL_1823_geo <- st_read(here(\"data\", \"SPL_1823_location.geojson\")) # location_id shapefiles and lat/long coordinates\nSEA_map <- st_read(here(\"data/raw\",\"04_SPL_Seattle_Map.geojson\")) # base SEA neighborhood map\n\n# Recode gender column: ----\nSPL_1823 <- SPL_1823 %>%\n  mutate(\n    gender=recode(staying_gender,\n                  \"Female\"=\"Fem\",\n                  \"Feminine presenting\"=\"Fem\",\n                  \"Gender-non-conforming presenting\" = \"non_conforming\",\n                  \"Male\"=\"Masc\",\n                  \"Masculine presenting\"=\"Masc\",\n                  \"Other_Unsure\"=\"Unsure\",\n                  \"Unsure\"=\"Unsure\"))\n\n\n# Calculate proportion women or men by neighborhood (S_HOOD)----\n## instead of doing a f:m ratio, calculate the proportion of total observed that are women/men\nFM_prop_shood <- SPL_1823 %>%\n  group_by(S_HOOD, gender, study_id) %>%\n  dplyr::summarise(count= n()) %>%\n  pivot_wider(\n    id_cols = c(S_HOOD, study_id),\n    names_from = gender,\n    values_from = count,\n    names_prefix = \"Observed_\"\n  ) %>%\n  rowwise() %>% #this is to make sure the total is calculated correctly in the next line\n  dplyr::mutate(total = sum(c_across(Observed_Fem:Observed_non_conforming), na.rm=T)) %>% #calculate total observed, including observations where no one was observed!\n  mutate_at(vars(Observed_Fem, Observed_Masc, Observed_non_conforming, Observed_Unsure), ~replace_na(., 0)) %>% #replace NAs with 0s so that the calculated proportions return 0 and not NA\n  mutate(F_prop = Observed_Fem/total,\n         M_prop = Observed_Masc/total) %>%\n  select(S_HOOD, study_id, F_prop, M_prop, Observed_Fem, Observed_Masc, total)\n\nFM_prop_shood\n## note that the total is the sum of fem, masc, non_conforming, unsure, and empty observations (i.e., empty locations where no one was staying at all). this is why e.g., Bitter Lake in 2018 has 1 fem, 0 masc, and 16 total observations\n\n\n\n# Calculate proportion women or men by observation site (location_id)----\n## instead of doing a f:m ratio, calculate the proportion of total observed that are women/men\nFM_prop_locid <- SPL_1823 %>%\n  group_by(location_id, gender, study_id) %>%\n  dplyr::summarise(count= n()) %>%\n  pivot_wider(\n    id_cols = c(location_id, study_id),\n    names_from = gender,\n    values_from = count,\n    names_prefix = \"Observed_\"\n  ) %>%\n  rowwise() %>% #this is to make sure the total is calculated correctly in the next line\n  dplyr::mutate(total = sum(c_across(Observed_Fem:Observed_non_conforming), na.rm=T)) %>% #calculate total observed\n  mutate_at(vars(Observed_Fem, Observed_Masc, Observed_non_conforming, Observed_Unsure), ~replace_na(., 0)) %>% #replace NAs with 0s so that the calculated proportions return 0 and not NA\n  mutate(F_prop = Observed_Fem/total,\n         M_prop = Observed_Masc/total) %>%\n  select(location_id, study_id, F_prop, M_prop, Observed_Fem, Observed_Masc, total)\n\n# append S_HOOD back----\nFM_prop_locid <- SPL_1823 %>%\n  select(location_id, S_HOOD) %>%\n  distinct() %>%\n  right_join(FM_prop_locid, by = \"location_id\")\n\nFM_prop_locid\n# again, note that the total is the sum of fem, masc, non_conforming, unsure, and empty observations (i.e., empty locations where no one was staying at all). this is why e.g., BLV1 in 2018 has 1 fem, 0 masc, and 8 total observations\n\n# Filter 2023 data ----\nFM_prop_23_locid <- FM_prop_locid %>% filter(study_id == \"2023_Seattle_Citywide\")\n\n# Join location_id coordinates with 2023 filtered data ----\nFM_prop_23_locid_geo <- left_join(FM_prop_23_locid, SPL_1823_geo, by = \"location_id\")","type":"text"}]
